You are an expert Flutter and Supabase developer.

I have an existing Flutter application that stores session data, preferences, and local settings using SharedPreferences.

Your job is to completely migrate all storage logic to Supabase, and Supabase will now act as the sole data storage system (no local or offline saving). This involves:

🔹 Removing all use of SharedPreferences
🔹 Replacing every data-saving/retrieving logic with a Supabase-powered equivalent
🔹 Keeping all current UI and app behavior exactly the same — users should see no difference in behavior or flow
🔹 You must not guess or invent any data, field, or flow — only use what you extract from the project’s files
🔹 Scan and understand the codebase before making any suggestions or implementations

Your Tasks:
1. Analyze the existing project
Scan all open files

Detect and list every usage of SharedPreferences

Identify each key used, the data type, and how/where it is used in the app

Build a full understanding of the data flow and logic currently implemented

2. Design a Supabase schema
Create the exact necessary table structure based only on what the scan reveals

Define correct data types, constraints, and timestamp fields (created_at, updated_at)

Do not assume or create example table names — determine everything based on how the code is structured and functioning

3. Set up Supabase Row-Level Security (RLS)
Enable RLS on all created tables

Write access policies so that users can only access or modify their own records

Use proper identifiers already present in the app: such as school_email for students and LCno for lecturers — only if these are actually used in the code

4. Replace all SharedPreferences usage
Build a single Dart service class or helper to manage all Supabase interactions

Replace each SharedPreferences.get, .set, and .remove* with equivalent Supabase logic**

Preserve the current behavior of all features without introducing delays or regressions

5. Handle authentication
Use supabase.auth.signInWithPassword() if email + password is used

On first login, insert a new user record into Supabase only if it doesn’t exist

Base login user identification (e.g. by email or lecturer code) strictly on existing logic — do not assume anything

6. Maintain UI behavior
Do not modify or refactor any UI widgets or screens

Only replace underlying logic and data handling

Ensure screens behave as expected: e.g. onboarding screen, theme switching, language selection — based on values now fetched from Supabase

7. Supabase as the only source of truth
Do not use or retain any SharedPreferences fallback or local caching

Every data read or write must go through Supabase in real time

Ensure logic for fields such as hasCompletedOnboarding, dark_mode, language, etc. still works identically using Supabase

📘 Supabase Schema Notes:
Only create the necessary fields and tables by analyzing the actual usage in code

Add timestamps like created_at and updated_at

Ensure the schema reflects exactly what the Flutter code expects

Do not suggest or guess any table names or field types unless explicitly used in the code

🏁 Final Instructions:
Start by deeply scanning the codebase for logic, values, structure, and patterns

Then replace every use of SharedPreferences with equivalent Supabase logic

Implement the required Supabase schema, RLS policies, and Dart service class

Preserve 100% of the app’s user-facing behavior and flows

Do not invent or assume anything not present in the code

💡 Additional Notes:
Lecturer signup will use both email and LC number for registration, but only the LC number is used for login.

All image uploads (profile pictures, QR codes, timetables, etc.) should be done via Supabase Storage, and file paths will be stored in the relevant database columns.

QR codes are generated by lecturers and scanned by students — ensuring proper permissions for both.

🧩 Data Modeling Clarification:
Users Table: Stores all users (students, lecturers, admins). Each user should only view his/her own details.

Strict Rules: No future features should be assumed.

Don't suggest dashboards, approval workflows, or extra roles that haven't been defined.

The goal is to fully replace SharedPreferences with Supabase without changing app behavior or UI.

remember:
Scan the codebase to understand how SharedPreferences is currently used.

Create the necessary Supabase tables and relationships based on the data observed in the app.

Write and integrate the Supabase service class for managing data retrieval and updates.

Replace all SharedPreferences usage in the app with calls to Supabase.

Ensure authentication works correctly with Supabase (user creation on first login, etc.).

Test thoroughly to make sure the app behavior and user interface stay the same.

Once the migration is complete, the app should seamlessly use Supabase for data storage, ensuring that the user’s preferences and session data are saved and retrieved in real-time without relying on SharedPreferences.
   

   some help full link -https://supabase.com/docs/reference/dart/upgrade-guide
                        -https://github.com/supabase/storage
                       -https://github.com/supabase/supabase-flutter
                       -https://supabase.com/docs/guides/database/overview
                       others
                       -https://supabase.com/dashboard/project/vaaqnexxyzzmjwquhpry/editor
                       -https://supabase.com/dashboard/project/vaaqnexxyzzmjwquhpry/sql/new